@page "/users"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using OneClick.Domain.Domain.Customers
@using OneClick.Shared.AppEnums.UserEnums
@using OneClick.WASM.Components.Shared.AppUsers
@using OneClick.WASM.UseCases

@inject IStringLocalizer<Users> localize
@inject IUserWasmRepository _userRepository
@attribute [Authorize(Roles = "Admin")]
@inject IJSRuntime _JSRuntime
@inject NavigationManager _navigate


    <PageTitle>@localize["Users"] | CopyTrader</PageTitle>


<MudPaper MinHeight="400px" MaxWidth="1300px" Outlined Class="cust-block ma-2 ma-md-4">

    <MudTable Elevation="2" Loading="_isLoading" Items="_users">
        <HeaderContent>
            <MudTh Style="cursor: pointer" onclick="@(()=>SortEvent(UserSort.UserName))">
                Name <MudIcon Color="@(sortedBy == "Name" ? Color.Surface : Color.Transparent)" Icon="@icons[NameSortDesc == false ? 0 : 1]" Size="Size.Small" />
            </MudTh>
            <MudTh>ProjectCount</MudTh>
            <MudTh Style="cursor: pointer" onclick="@(()=>SortEvent(UserSort.Telegram))">
                Telegram <MudIcon Color="@(sortedBy == "Telegram" ? Color.Surface : Color.Transparent)" Icon="@icons[TelegramSortDesc == false ? 0 : 1]" Size="Size.Small" />
            </MudTh>
            <MudTh>
                Roles
            </MudTh>
            <MudTh Style="cursor: pointer" onclick="@(()=>SortEvent(UserSort.Status))">
                Status <MudIcon Color="@(sortedBy == "Status" ? Color.Surface : Color.Transparent)" Icon="@icons[StatusSortDesc == false ? 0 : 1]" Size="Size.Small" />
            </MudTh>
            <MudTh Style="cursor: pointer" onclick="@(()=>SortEvent(UserSort.WalletBalance))">
                Balance <MudIcon Color="@(sortedBy == "Balance" ? Color.Surface : Color.Transparent)" Icon="@icons[BalanceSortDesc == false ? 0 : 1]" Size="Size.Small" />
            </MudTh>
            <MudTh Style="cursor: pointer" onclick="@(()=>SortEvent(UserSort.Registered))">
                Registered <MudIcon Color="@(sortedBy == "Registered" ? Color.Surface : Color.Transparent)" Icon="@icons[RegisteredSortDesc == false ? 0 : 1]" Size="Size.Small" />
            </MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">
                <MudStack Row Justify="Justify.FlexStart" AlignItems="AlignItems.Center">
                    <MudAvatar Size="Size.Medium">
                        <MudImage Src="@context.Avatar"></MudImage>
                    </MudAvatar>
                    <MudLink Class="text-decoration-none fw-bold" Color="Color.Info" Href="@("users/"+context.Id)">@context.UserName</MudLink>
                </MudStack>


            </MudTd>
            <MudTd DataLabel="ProjectCount"></MudTd>
            <MudTd DataLabel="Telegram">
                <MudLink Class="text-decoration-none" Color="Color.Info" OnClick="(()=>TelegramRequest(context.Telegram))">@context.Telegram</MudLink>
            </MudTd>
            <MudTd DataLabel="Roles"></MudTd>
            <MudTd DataLabel="Status"></MudTd>
            <MudTd DataLabel="Balance">@context.Balance?.WalletBalance.ToString("N2")</MudTd>
            <MudTd DataLabel="Registered">@context.Registered</MudTd>
            <MudTd>
                <MudIconButton OnClick="(()=>DepositByAdminDialog(context))" Color="Color.Success" Icon="@Icons.Material.Filled.AddCard"></MudIconButton>
                <MudIconButton OnClick="(()=>EditUser(context.Id))" Color="Color.Default" Icon="@Icons.Material.Filled.Edit" aria-label="edit" />

                <MudIconButton OnClick="(()=>MessagerDialog(context))" Color="Color.Surface" Icon="@Icons.Material.Filled.Mail" aria-label="delete" />

            </MudTd>
        </RowTemplate>
    </MudTable>


</MudPaper>


@code {    
    public List<Customer>? _users { get; set; }
    public bool _isLoading { get; set; } = true;
    private string[] icons = { Icons.Material.Filled.ArrowDownward, Icons.Material.Filled.ArrowUpward };
    private string sortedBy = "Registered";
    private bool? NameSortDesc { get; set; }
    private bool? ProjectCountSortDesc { get; set; }
    private bool? TelegramSortDesc { get; set; }
    private bool? RolesSortDesc { get; set; }
    private bool? StatusSortDesc { get; set; }
    private bool? BalanceSortDesc { get; set; }
    private bool? RegisteredSortDesc { get; set; }

    protected override async Task OnInitializedAsync(){
        _users = await _userRepository.Get();
        _isLoading = false;
    }

    
    private async Task TelegramRequest(string telegram)
    {
        var url = "https://t.me/" + telegram;
        await _JSRuntime.InvokeVoidAsync("open", url, "_blank");
    }

    async void SortEvent(UserSort sortBy){

    }
    // private bool _isLoading { get; set; } = true;

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (!firstRender)
    //     {
    //         return;
    //     }


    //     if (string.IsNullOrEmpty(id))
    //     {

    //     }
    //     else
    //     {

    //     }
    // }


    private async void DepositByAdminDialog(Customer user)
    {
        // var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small };
        // var parameters = new DialogParameters<DepositByAdminDialog>();
        // parameters.Add(x => x.ButtonText, "Пополнить");
        // parameters.Add(x => x.ContentText, "Пополнение баланса пользователя " + user.Name);
        // parameters.Add(x => x.ContentText2, "");


        // var dialog = await DialogService.ShowAsync<DepositByAdminDialog>("Пополнение баланса", parameters, options);
        // var result = await dialog.Result;
        // if (!result.Cancelled)
        // {
        //     var deposit = (double)result.Data;
        //     if (deposit <= 0)
        //     {
        //         return;
        //     }
        //     else
        //     {
        //         //var response = await Transaction.New(TransactionCode.Deposit, new Guid(user.Id),"", PaymentSystem.PaymentViaAdmin, deposit, "");
        //         var response = await Transaction.Deposit(user.Id, "", PaymentSystem.PaymentViaAdmin, deposit, "");

        //     }

        // }
        // StateHasChanged();
    }

    private void EditUser(string id)
    {
        _navigate.NavigateTo("users/" + id);
    }

    private async Task MessagerDialog(Customer user)
    {
        // var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small };

        // var parameters = new DialogParameters<RemindDialog>();
        // parameters.Add(x => x.ContentText, "Сообщение для пользователя " + user.Name);
        // parameters.Add(x => x.ButtonText, "Отправить");
        // parameters.Add(x => x.Color, Color.Info);
        // parameters.Add(x => x.UserTelegramId, user.TelegramId);

        // parameters.Add(x => x.Icon, Icons.Material.Filled.Mail);

        // var dialog = await DialogService.ShowAsync<RemindDialog>("Мессенджер", parameters, options);
        // var dialogResult = await dialog.Result;
        // if (!dialogResult.Cancelled)
        // {
        //     var alert = (Models.Alert)dialogResult.Data;
        //     var appUser = _context.Users.Where(x => x.Id == user.Id).FirstOrDefault();
        //     if (appUser != null)
        //     {
        //         appUser.Alerts.Add(alert);
        //         _context.Update(appUser);
        //         _context.SaveChanges();

        //         StateHasChanged();

        //     }

        // }
    }
}
